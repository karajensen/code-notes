/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SOFTWARE DEVELOPMENT
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LIBRARY: Set of functions, organized in classes, that does some work and then returns control to the client
FRAMEWORK: Abstract design you need to insert into through inheritance/callbacks, that the framework then calls
TOOLKIT: More focused library, used almost exclusively for graphical widgets, and GUI components

AGILE METHODOLOGY
• Uses self-organizing teams
• Uses time-boxed iterative approach
• Encourages rapid and flexible response to change
• Each iteration involves one team working on planning, design, coding and testing
• At end of each iteration product is demonstrated to stakeholders
• Goal is to have an available release at the end of each iteration
• Have a daily standup or daily scrum meeting 

SCRUM METHODOLOGY
• Product Owner: represents the stakeholders; ensures team delivers value to business
• Product Owner writes user stories, prioritizes and adds them to the backlog
• ScrumMaster: acts as buffer between team and any problems, not the team leader
• Stakeholders: customers of the product
• Scrum of scrums: team representitives have a 'standup' meeting
• Retrospective to reflect on how the iteration went

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SOFTWARE LICENSING
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GENERAL PUBLIC LICENSE (GPL)
• Requires releasing the source code of your application if distributing the open source software 
• All portions of the project must be under GPL as well

LESSER GENERAL PUBLIC LICENSE (LGPL)
• Allows distributing the open source software with your application without releasing the application source
• LGPU open source software must be re-distributed as LGPL, other portions of project may have different licences

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WINDOWS DEVELOPMENT
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4 APPLICATION TYPES:
• Console applications
• Windows applications
    - Windows Forms
    - Win32 Applications
    - WPF Applications
• ASP.NET applications
• Web Services

Dependency Walker: 
- Shows dlls loaded for application
- Allows solving dll hell issues where build paths point to multiple versions of the same dll
 
Process Monitor (ProcMon): 
- Filesystem, registry and process and thread activity
 
Application Verifier: 
- Adds more verbose memory and crash checking at expense of speed
 
Intel Inspector: 
- More detailed memory crash and thread error detection
- Use of unitialised and invalid memory
- Wrong use of memory allocation calls
- Memory growth and leak analysis
- High CPU and memory cost to run
- Threaded code doesn't run in parallel
 
Sanitizers: 
- Compilier checks for errors
- Low CPU and memory cost to run
- Threaded code runs in parallel
- VS2019 16.7+ has support for Address Sanitizer (ASan)
 
Sampling profilier: 
- Take samples of location and create statistics to see hotspots and flamegraph
- VTune, VS Sampling Profilier 
 
Concurrency profilier: 
- Check threading used
- VTune, VS Concurrency Profilier (2019+)
 
Memory profilier: 
- Records heap memory use and number of allocations
- MTuner, VS Memory Analyzer
 
QML profilier:
- Qt Creator
 
System-wide profilier:
- Event Tracing for Windows (ETW)
- Easy to create and share trace files
- Can see callstack for application if PDB files are kept
- Can see if other processes interfering with application stability
- Can see user mouse and key input

CONSOLE COMMANDS:
command & command                   // Execute both commands
%cd%                                // current directory
dir /w                              // gives directory contents
mklink /J "dst" "src"               // dst final folder must not exist and be named the same as src final folder
cd path                             // move up a folder or switch to absolute path
cd ..                               // move down a folder
start.                              // open folder
mkdir "path"                        // create new folder
rmdir "path" /s /q                  // delete a non-empty folder
del "file"                          // delete a file
xcopy "src" "dst" /e /i /h          // copy folder at src to dst, dst final folder must not exist
copy /Y "c:\src.txt" "C:\dest.txt"  // Dest path must exist
copy /Y "c:\src\" "C:\dest\"        // Dest path must exist, copies all files only in folder
myFile.bat >C:\output.txt           // Output results to file, overwrites
myFile.bat >>C:\output.txt          // Output results to file, appends

WINDBG: 
http://www.windbg.info/doc/1-common-cmds.html
Open executable -> Set symbol path, Set source path

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MAC DEVELOPMENT
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

• Code in C++/Objective-C
• Use Xcode for IDE and Cocoa for framework
• Graphics API is OpenGL

ENABLE VIEW HIDDEN FILES
defaults write com.apple.finder AppleShowAllFiles -bool true
killall Finder

TERMINAL COMMANDS:
pwd                            // gives name of folder currently in
ls                             // gives directory contents
open .                         // open folder
cd folder                      // move up a folder
cd ..                          // move down a folder
./myfile.sh                    // run the file
sudo nano ~/.bash_profile      // open file to add/edit environment variables
sudo nano /etc/paths           // once open, change path, ctrl+x, shift+y, enter

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LINUX DEVELOPMENT
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TERMINAL COMMANDS:
sudo chmod +x filename         // turn into an exe
xdg-open ./                    // open folder
xkill                          // kill process

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GIT SOURCE CONTROL
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
• If uncommited changes are on a branch, new branches checked out will take those changes
• repo will be something like: https://github.com/name/repo.git

tig                                                 // View commit information
git log                                             // List commits and commitIDs
git --no-pager log > log.txt                        // Save list of commits and commitIDs to a file
git config --global --edit                          // Show the git config file
git format-patch -1 HEAD                            // Create diff patch
git remote show origin                              // Show remote branch of local and URL
git tag                                             // List all remote tags
git branch                                          // List all branches locally
git branch --sort=-committerdate                    // List all branches locally by date
git branch -r                                       // List all remote branches
git clone <repo_url> <folder_name>                  // Clone repository into optional folder
git submodule add <repo_url> <folder_name>          // Create submodule
git submodule init                                  // Initialise all submodules
git submodule update --recursive                    // Update all submodules, recursive optional
git fetch                                           // Gets updates from server
git fetch --all --tags                              // Gets all tags from the server
git fetch --prune                                   // Removes deleted remote branches from cache, do before listing
git checkout tags/<tag> -b <branch>                 // Checkout tag as a branch
git checkout -b <branch> origin/<parent_branch>     // Create new branch from another branch
git checkout <branch>                               // Checkout a branch
git checkout <commit_id>                            // Checkout the commit ID
git status                                          // Show changed files in branch
git add -A                                          // Add changes to next commit
git commit -am "description"                        // Commit changes
git commit --amend -e                               // Add changes to previous commit in local repro
git commit <file_path> -m "description"             // Commit a single file, even if multiple have been added
git checkout <file_path>                            // Revert uncommited changes to file
git branch -m <old_name> <new_name>                 // Rename a local branch
git push                                            // Push local changes to remote branch
git push -f                                         // Push local changes to remote branch, required for soft resets/rebases
git push origin <remote_branch>                     // Push local changes to remote branch
git push -u origin <remote_branch>                  // Push local changes and create a new remote branch
git push origin --delete <remote_branch>            // Delete remote branch
git push --delete origin <tag_name>                 // Delete remote tag
git branch -D <branch>                              // Delete local branch
git tag -D <tag_name>                               // Delete local tag
git pull origin <parent_branch>                     // Merge parent branch into current branch
git mergetool                                       // Fix merge conflicts
git difftool                                        // Run difftool on each change
git clean -f                                        // Delete uncommitted files
git clean -fd                                       // Delete uncommitted directories
git clean -f -n                                     // View all files which will be deleted
git clean -fd -n                                    // View all directories which will be deleted
git reset --hard                                    // Discard all uncommitted changes
git reset --hard <commit_id >                       // Revert back to commit
git reset --soft HEAD~<num_of_commits>              // Soft reset: Remove all commits, puts all changes into git add
Git reset --hard origin/<remote_branch>             // To reset branch to what is on remote_branch, commits are lost after
git restore --staged <file_path>                    // Remove file from git add
git stash                                           // Save changes
git stash pop                                       // Apply changes
git rebase -i origin/<parent_branch>                // Rebase off remote branch
git rebase commit_id --onto origin/<parent_branch>  // commit_id is parent commit before first actual local commit

INITIALISING GIT
git config --global user.name "Kara Jensen"
git config --global user.email mail@karajensen.com
git config --global --add merge.tool kdiff3
git config --global --add mergetool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
git config --global --add mergetool.kdiff3.trustExitCode false
git config --global --add diff.guitool kdiff3
git config --global --add difftool.kdiff3.path "C:/Program Files/KDiff3/kdiff3.exe"
git config --global --add difftool.kdiff3.trustExitCode false

[merge]
	tool = kdiff3
[mergetool "kdiff3"]
	cmd = \"C:\\\\Program Files (x86)\\\\KDiff3\\\\kdiff3\" $BASE $LOCAL $REMOTE -o $MERGED
[diff]
	guitool = kdiff3
[difftool "kdiff3"]
	path = C:/Program Files/KDiff3/kdiff3.exe
	trustExitCode = false

GIT IGNORE
# ignore all .a files
*.a
# still track lib.a, even though you're ignoring .a files above
!lib.a
# ignore all files in the build/ directory
build/
# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt
# Don't ignore file
!build/MyFile.txt

GIT MERGING
LOCAL    Head of current branch on the machine that you are using
REMOTE   Head of the remote branch that you are trying to merge into your local branch
BASE     The common ancestor of REMOTE and LOCAL
MERGED   The tag / HEAD object after the merge, this is saved as a new commit

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SVN SOURCE CONTROL
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

svn revert folder --depth=infinity        // reset all changes
svn commit --depth infinity . -m "Merge"  // Commit all changes
svn checkout url /folder/                 // Checkout url into folder
svn update folder                         // Update folder recursivly
svn cleanup                               // Unlock repository if needed
svn add folder                            // Add folder or file to local
svn delete folder                         // Remove folder from local
svn commit -m "log messages"              // Commit changes to remote
svn list                                  // View repository
svn diff folder                           // View difference between remote/local
svn status folder                         // View status of folder/file, M = modified
svn log folder                            // List commits in folder

MERGING
• Ensure clean except for your changes
• Merge trunk into your branch: 
   - Right click on your branch and select MERGE
   - Merge range of revisions, all revisions
   - URL to merge from set to trunk
   - Commit the merge as its local
• Merge branch into truck, this is local

PUSHING CHANGES
• Right mouse click and go 'Tortoise SVN' and 'Check for modifications'
• Revert or remove anything you don't want to commit
• Check with base to see your changes
• Right mouse click and go 'SVN Commit'
• Add a message and press submit

CREATING A NEW BRANCH
• Right mouse click on the trunk folder from which you would like to branch
• Select 'Tortoise SVN' and 'Branch/tag'
• Change the 'To path' to your new branch and add a message
• Select 'HEAD revision in the repository' to branch from the latest commit
• Right mouse click and go 'SVN Checkout' 
• Add the URL and change the checkout directory
• Set the checkout depth for what you want to check out
• Set revision to HEAD

VIEWING COMMITS
• Open the SVN log
• Select all the commits you want to view including the commit before the initial commit
• Right mouse click and go 'Compare Revisions'

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PERFORCE SOURCE CONTROL
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ADDING WORKSPACE PATH
• Connection -> Edit Current Workspace
• To update Right mouse click on workspace and go Get Latest Revision

CLEANING WORKSPACE
• Delete all folders you want to clean except root folder
• Right mouse click on workspace and go Get revision and tick Force

WORKFLOW
• In the workspace area, check out each file you want to make edits to
• Any changes are added to the Default Changelist. Create a new changlist as necessary.
• To pull from the latest remove, RMC on the workspace and go Get Latest Revision
• To update the changelist, RMC on it and go Resolve Files
• If there are files to resolve, choose Automatic Resolve and click Auto Resolve
• If there are still files unresolved, Click Interactivly Resolve Files One at a Time and then Run Merge Tool
• Fix any conflicts by using the red arrows at the top and then clicking on the colored icons on the right 
    - Purple = new changes
    - Green = old changes
    - Yellow = ignore
• To save your changelist, RMC it and go shelve. You can revert your workspace if needed once they are saved.
• To restore your changelist into the workspace, RMC it and go unshelf.
• To submit your changelist, RMC it and go submit

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// XCODE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

• Executables, dynamic libraries and debug files use Mach Object (Mach-O) container format
• Executables don't have a file extension and on desktop are placed in a .app bundle
• If not stripped manually, executables contain unwind information and a symbol table but not debug information
• Dynamic Libraries use the .dylib extension, otherwise are the same as executables
• Debug files use the .dSYM extension and contain symbol table, debug information and rarely unwind information
• Debug information is automatically placed in a dSYM file when building

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VISUAL STUDIO
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VARIABLE WATCH
str.c_str(),s8                       For utf-8 string str
(char*)str.d + str.d->offset,su      For QString

ENVIRONMENT VARIABLES:
$(SolutionDir)
$(ProjectName)
$(Configuration)

COMPILIER OPTIONS:
/GS           Prevent returning after a function has trashed the stack                        
/NXCOMPAT     Makes the data in the heap/stack non-executable
/DYNAMICBASE  Extra security with no run time cost
/ZI           Program Database (PDB) for Edit And Continue, disables /Zo
/Zi           Program Database (PDB), enables /Zo
/Z7           Debug information becomes part of obj files
/Zo           Generate enhanced debug information for release builds (PBDs get larger)

PREPROCESSOR OPTIONS:
_DEBUG
_MANAGED
__FILE__    //name of file
__LINE__    //current line number
__TIME__    //time file was compiled
__DATE__    //date file was compiled

DEBUGGING:
• Debug/Release require debug information for any library / application you want to step through
• Debug information is always placed in obj (/Z7) or pdb files (/Zi)
• PDBs use a GUID that matches its to it's dll/exe. For every build, this changes
• Release flags to generate PDBs: /Zi /DEBUG /OPT:REF /OPT:ICF
• Release flags to generate PDBs and disable optimizations: /Zi /Od /Ob0 /DEBUG /OPT:REF /OPT:ICF

COMBINING DEBUG AND RELEASE:
• Combining will output 'mismatch detected for _ITERATOR_DEBUG_LEVEL'
• To prevent, ensure Debug and Release are both build with same C-runtime library (CRT)
• CRT options /MD /MDd /MT /MTd /LD /LDd

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CMAKE
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# call cmake, will use CMakeLists.txt file one folder up
# VS is a multi-generator build which lets you change configuration
# Because of this checking CMAKE_BUILD_TYPE will not work
cmake -G "Visual Studio 14 2015 Win64" -DCMAKE_PREFIX_PATH=C:/Qt/Qt5.6.1/5.6/msvc2015_64 ..
cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_PREFIX_PATH=C:/Qt/Qt5.6.1/5.6/msvc2015_64 ..

cmake_minimum_required(VERSION 2.8.11)
project(project_name)
set(MY_FILES myFile.cpp myFile.h)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
link_directories(${MY_DIRECTOR}) # additional library directories
add_executable(project_name ${MY_FILES})
add_library(project_name ${SRC_LIST})
source_group("MyGroup" FILES ${MY_FILES}) # must be after add_executable/add_library
set_target_properties(project_name PROPERTIES LINK_FLAGS "/ignore:4286")
target_link_libraries(project_name ${CMAKE_CURRENT_SOURCE_DIR}/mylib.lib) # all configs
target_link_libraries(project_name debug ${CMAKE_CURRENT_SOURCE_DIR}/mylibD.lib)
target_link_libraries(project_name optimized ${CMAKE_CURRENT_SOURCE_DIR}/mylib.lib)

# DEFINES
add_definitions(-DMY_DEFINE)
add_definitions(-DMY_DEFINE="${MY_VARIABLE}")
target_compile_definitions(project_name PRIVATE # For Mult-Generator builds (VS)
	$<$<CONFIG:DEBUG>:MY_DEFINE="${MY_VARIABLE}">
	$<$<CONFIG:RELWITHDEBINFO>:MY_DEFINE="${MY_VARIABLE}">
)

# VARIABLES
set(ENV_VAR $ENV{ENV_VAR}) # Environment variable
set(MY_VARIABLE ON)        # Bool variable
set(MY_PATH c:/folder)     # String variable
set(SRC_LIST a.cpp b.cpp)  # String list

# CONDITION LOGIC
if (CMAKE_BUILD_TYPE EQUAL "DEBUG")
if(MY_VARIABLE OR MY_VARIABLE2 AND MY_VARIABLE3)
elseif(MY_VARIABLE)
else()
endif()

# FILE SYSTEM
file(COPY ${SRC_PATH}/folder/file.txt DESTINATION ${DST_PATH}/folder)
file(GLOB_RECURSE MY_FILES "folder/*.ext") # Sets MY_FILES as list

# MESSAGING
error("My message ${MY_VARIABLE}")
message("My message ${MY_VARIABLE}")

# FUNCTIONS
function(MY_FUNCTION arg1 arg2 ...)
endfunction(MY_FUNCTION)
MY_FUNCTION("value1" "value2" ...)

# SET RELEASE WITH DEBUG INFO ON WINDOWS
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Zi /Od /Ob0")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /DEBUG /OPT:REF /OPT:ICF")

# FIND ALL CPP/H FILES AND SHOW IN VISUAL STUDIO
set(_src_root_path "${CMAKE_CURRENT_SOURCE_DIR}")
file(
    GLOB_RECURSE _source_list 
    LIST_DIRECTORIES false
    RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
    "${_src_root_path}/*.c*"
    "${_src_root_path}/*.h*"
)
add_library(MySources ${_source_list}) # or add_executable
foreach(_source IN ITEMS ${_source_list})
    get_filename_component(_source_path "${_source}" PATH)
    string(REPLACE "/" "\\" _source_path_msvc "${_source_path}")
    source_group("${_source_path_msvc}" FILES "${_source}")
endforeach()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GIT BASH
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# VARIABLES
MY_VAR="MyVariable"
PLATFORM_TYPE=`uname -s`

# CONDITION LOGIC
# Gap after [ required else compilation error
if [ `expr substr $PLATFORM_TYPE 1 10` == "MINGW64_NT" ]; then
    echo "Windows Found"
elif [ `uname -s` = 'Linux' ]
    echo "Linux Found"
else
    echo "Unknown"
fi

# BASH COMMANDS
export MY_ENV_VARIABLE="${MY_VAR}"    # Set env variable for bash instance
if [ ! -z "${MY_ENV_VARIABLE}" ]      # If env variable doesn't exist
if [ -f "${CL_PATH}" ]                # If file exists
read -p "Press any key to exit..."    # Pause the console

# ITERATE OVER CHANGED FILES
git status --porcelain | awk '$1 == "M" { print $2 }' | while read file
do
    if [[ ( $file == *.hpp ) || ( $file == *.cpp ) ]] ; then
        echo $file
    fi
done

# WINDOWS COMMANDS
cmd //c copy ${MY_PATH} c:\\Folder\\file.exe
cmd //c del c:\\Folder\\file.exe
cmd //c "xcopy c:\dev\tools\WindowsDev\clcache\4.1.0\clcache x86 /e /i /h"
setx MY_ENV_VARIABLE "${MY_VAR}       # Set env variable for system, bash not updated

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MSBUILD
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">

<!-- PROPERTY GROUPS -->
<!-- Can exist inside/outside targets -->
<!-- Usage: $(MyProperty)
<PropertyGroup>
  <MyProperty>MyPropertyValue</MyProperty>
</PropertyGroup>

<!-- ITEM GROUPS -->
<!-- Can have multiple identities -->
<!-- Access through %(SampleItem.Identity) and %(SampleItem.Id)
<ItemGroup>
  <SampleItem Include="one">
    <Id>1a</Id>
  </SampleItem>
  <SampleItem Include="one">
    <Id>1b</Id>
  </SampleItem>
  <SampleItem Include="two">
    <Id>2</Id>
  </SampleItem>
</ItemGroup>

<!-- TARGET -->
<!-- Will execute DependsOnTargets -->
<Target Name="Deploy" DependsOnTargets="BatchExample;Build">
</Target>
<Target Name="Build">
</Target>

<!-- TARGET: BATCH GROUP -->
<!-- Will loop through each item in ItemGroup SampleItem -->
<Target Name="BatchExample">
  <Message Text="SampleItem.Identity: %(SampleItem.Identity)"/>
  <Message Text="SampleItem.Identity: %(SampleItem.Id)"/>
</Target>

<!-- TARGET: CALL EXE -->
<!-- Will only call exe if output/input are different ->
<Target Name="CallExe" Inputs="$(MYDIRECTORY)\MyFile.txt" Outputs="$(MYDIRECTORY)\MyFile.txt">
  <Exec Command="$(MYDIRECTORY)\MyExe.exe" WorkingDirectory="$(MYDIRECTORY)" />
</Target>

<!-- TARGET: REMOVE DIRECTORY -->
<Target Name="RemoveDir">
  <ItemGroup>
    <DirectoriesToRemove Include="$(MYDIRECTORY);$(MYDIRECTORY2)" Condition="$(ShouldRemove) == 'True'"/>
  </ItemGroup>
  <RemoveDir Directories="@(DirectoriesToRemove)" />
</Target>

<!-- TARGET: RECURSIVE COPY -->
<!-- For each item in the group copy input to output -->
<Target Name="RecursiveCopy" Outputs="%(MyGroup.Identity);%(MyGroup.Id)">
  <PropertyGroup>
    <Identity>%(MyGroup.Identity)</Identity>
    <Id>%(MyGroup.Id)</Id>
    <InputDir>$(MYDIRECTORY)\$(Identity)\$(Id)</InputDir>
    <OutputDir>$(MYDIRECTORY)</OutputDir>
  </PropertyGroup>
  <ItemGroup>
    <FilesToCopy Include="$(InputDir)\**" />
  </ItemGroup>
  <Error Condition="!Exists('$(InputDir)')"  Text="Directory '$(InputDir)' does not exist" />
  <Error Condition="!Exists('$(OutputDir)')" Text="Directory '$(OutputDir)' does not exist" />
  <Copy SourceFiles="@(FilesToCopy)"
        DestinationFolder="$(OutputDir)\%(RecursiveDir)"
        SkipUnchangedFiles="true" />
</Target>

<!-- TARGET: BATCH MULTIPLE GROUPS -->
<!-- Using multiple batches requires merging groups -->
<Target Name="BatchingMultiGroup">
  <ItemGroup>
    <Combined Include="@(MyGroupOne)">
      <GroupTwo>%(MyGroupTwo.Identity)</GroupTwo>
      <GroupTwoId>%(MyGroupTwo.Id)</GroupTwoId>
    </Combined>
  </ItemGroup>
  <Message Text="%(Combined.Identity) %(Combined.Id) %(Combined.GroupTwo) %(Combined.GroupTwoId) " />
</Target>
  
</Project>
